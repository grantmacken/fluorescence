name: continuous-integration
on:
  push:
    branches:
      - master
#https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#onevent_nametypes
# environment variables available to all jobs and steps in this workflow
env:
  ghSha: ${{ github.sha }}
  ghToken: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v2
      with:
          fetch-depth: 1
    - name: Pull in my docker images
      run: |
          echo '::set-env name=TERM::xterm'
          echo ' - pull in main docker images'
          make pull-pkgs
    - name: put xqerl escripts into 'xqerl-escripts' volume
      run: |
        # at the moment, only the compile script
        make escript
        docker volume list
        ls deploy
    - name: Create xqerl-escripts artifact
      uses: actions/upload-artifact@v2
      with:
        name: xqerl-escripts
        path: deploy/xqerl-escripts.tar
    - name: untar data  into 'xqerl database' volume
      run: make xqerl-database-tar-deploy
    - name: Bring up the xqerl container
      run: |
          echo ' starting xqerl will also: '
          echo ' - create the all the volumes we require for xqerl and the nginx proxy'
          echo ' - create the network we require'
          make xq-up
          make xq-info
    - name: build compiled xQuery files to run on the beam, then put into 'xqerl-compiled-code' volume
      run: make code
    - name: check what we have running on the beam
      run: |
          make xq-info-more
          # use curl to check routes
          make check-xq-routes-more
          # note if restXQ routes checkout OK then
          # routes to statis assets will not reslove as they rely on the proxy
    - name: Create xqerl-compiled-code artifact
      uses: actions/upload-artifact@v2
      with:
        name: xqerl-compiled-code
        path: deploy/xqerl-compiled-code.tar
    - name: Build 'nginx configuration files' from src files and put into 'nginx-configuration' volume
      run: |
          make ngx
          ls -al deploy
    - name: Create nginx-configuration artifact
      uses: actions/upload-artifact@v2
      with:
        name: nginx-configuration
        path: deploy/nginx-configuration.tar
    - name: Build 'static assets' from src files and put into 'static-assets' volume
      run: |
          source .env
          echo " - build static assets for [ ${DOMAIN} ]"
          make assets
          echo ' - the build artifact is the **static-assets.tar**'
          ls -al deploy/static-assets.tar
    - name: Create static-assets artifact
      uses: actions/upload-artifact@v2
      with:
        name: static-assets
        path: deploy/static-assets.tar
  # test:
    # runs-on: ubuntu-latest
    # needs: build
    # steps:
    # - uses: actions/checkout@v2
    #   with:
    #       fetch-depth: 1
    # - uses: actions/download-artifact@v2
    # - name: Move tars into deploy dir
    #   run: |
    #       mv static-assets/* deploy/
    #       mv nginx-configuration/* deploy/
    #       mv xqerl-compiled-code/* deploy/
    #       ls -al deploy
    # - name: Pull in my docker images
    #   run: |
    #       echo ' - pull in xq and ngx images'
    #       make pull-xq-ngx
    # - name: Setup Google Cloud Platform
    #   uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
    #   with:
    #     project_id: ${{ secrets.GCE_PROJECT_ID }}
    #     service_account_key: ${{ secrets.GCE_SERVICE_ACCOUNT_KEY }}
    #     service_account_email: ${{ secrets.GCE_SERVICE_ACCOUNT_EMAIL }}
    #     export_default_credentials: true
    # - name: Fetch certs and put into 'letsencypt' volume on 'github-actions' host
    #   run: |
    #       make gc-init
    #       make certs-into-vol
    #       ls -al deploy
    # - name: untar deploy tars into volumes
    #   run: |
    #     make xqerl-database-tar-deploy
    #     make static-assets-tar-deploy
    #     make nginx-configuration-tar-deploy


